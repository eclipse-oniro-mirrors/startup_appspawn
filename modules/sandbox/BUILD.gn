# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/startup/appspawn/appspawn.gni")
import("//base/startup/appspawn/modules/sandbox/sandbox.gni")
import("//build/ohos.gni")

if (defined(appspawn_sandbox_new) && appspawn_sandbox_new) {
  ohos_shared_library("appspawn_sandbox") {
    sources += appspawn_sandbox_src

    include_dirs = [
      ".",
      "${appspawn_path}/common",
      "${appspawn_path}/standard",
    ]

    include_dirs += appspawn_sandbox_inc

    configs = [ "${appspawn_path}:appspawn_config" ]

    defines = [ "APPSPAWN_SANDBOX_NEW" ]
    deps = [
      "${appspawn_path}/modules/module_engine:libappspawn_module_engine",
      "${appspawn_path}/util:libappspawn_util",
    ]
    external_deps = [
      "cJSON:cjson",
      "c_utils:utils",
      "hilog:libhilog",
      "init:libbegetutil",
    ]
    if (build_selinux) {
      defines += [ "WITH_SELINUX" ]
      external_deps += [ "selinux_adapter:libhap_restorecon" ]
    }
    if (appspawn_mount_tmpshm) {
      defines += [ "APPSPAWN_MOUNT_TMPSHM" ]
      if (build_selinux) {
        external_deps += [ "selinux_adapter:librestorecon" ]
      }
    }

    subsystem_name = "${subsystem_name}"
    part_name = "${part_name}"
    install_enable = true
    if (target_cpu == "arm64" || target_cpu == "x86_64" ||
        target_cpu == "riscv64") {
      defines += [ "APPSPAWN_64" ]
      module_install_dir = "lib64/appspawn/common"
    } else {
      module_install_dir = "lib/appspawn/common"
    }

    if (dlp_permission_enable) {
      cflags = [ "-DWITH_DLP" ]
      external_deps += [ "dlp_permission_service:libdlp_fuse" ]
    }
  }
} else {
  ohos_shared_library("appspawn_sandbox") {
    sources = [
      "${appspawn_innerkits_path}/permission/appspawn_mount_permission.c",
      "${appspawn_path}/common/appspawn_trace.cpp",
    ]
    sources += appspawn_sandbox_src

    include_dirs = [
      ".",
      "${appspawn_path}/common",
      "${appspawn_path}/standard",
      "${appspawn_innerkits_path}/client",
      "${appspawn_innerkits_path}/permission",
    ]
    include_dirs += appspawn_sandbox_inc

    configs = [ "${appspawn_path}:appspawn_config" ]

    defines = [ "APPSPAWN_CLIENT" ]
    deps = [
      "${appspawn_path}/modules/module_engine:libappspawn_module_engine",
      "${appspawn_path}/util:libappspawn_util",
    ]
    external_deps = [
      "cJSON:cjson",
      "c_utils:utils",
      "config_policy:configpolicy_util",
      "hilog:libhilog",
      "init:libbegetutil",
      "json:nlohmann_json_static",
    ]
    if (!defined(ohos_lite)) {
      external_deps += [ "hitrace:hitrace_meter" ]
    }
    if (build_selinux) {
      defines += [ "WITH_SELINUX" ]
      external_deps += [ "selinux_adapter:libhap_restorecon" ]
    }
    if (appspawn_mount_tmpshm) {
      defines += [ "APPSPAWN_MOUNT_TMPSHM" ]
      if (build_selinux) {
        external_deps += [ "selinux_adapter:librestorecon" ]
      }
    }
    if (appspawn_report_event) {
      defines += [ "APPSPAWN_HISYSEVENT" ]
      external_deps += [ "hisysevent:libhisysevent" ]
      include_dirs += [ "${appspawn_path}/modules/sysevent" ]
      sources += [ "${appspawn_path}/modules/sysevent/hisysevent_adapter.cpp" ]
    }
    if (appspawn_support_nosharefs) {
      defines += [ "APPSPAWN_SUPPORT_NOSHAREFS" ]
    }

    subsystem_name = "${subsystem_name}"
    part_name = "${part_name}"
    install_enable = true
    if (target_cpu == "arm64" || target_cpu == "x86_64" ||
        target_cpu == "riscv64") {
      defines += [ "APPSPAWN_64" ]
      module_install_dir = "lib64/appspawn/common"
    } else {
      module_install_dir = "lib/appspawn/common"
    }

    if (dlp_permission_enable) {
      cflags_cc = [ "-DWITH_DLP" ]
      external_deps += [ "dlp_permission_service:libdlp_fuse" ]
    }
  }
}
